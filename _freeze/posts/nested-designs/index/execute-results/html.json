{
  "hash": "59537a90811c9fd3fe1031b003e7ee5c",
  "result": {
    "markdown": "---\ntitle: \"R Tutorial: Analysis of results of a nested experimental design\"\ncategories: [\"R\", \"tutorial\",\"statistical inference\", \"nested design\"]\ndate: \"2023-10-11\"\ndescription: 'A tutorial with R code for analyzing the results of nested designs'\ntoc: true\ntoc-location: left\n---\n\n\n# What is a nested design?\n\nA *nested design* is a type of experimental design in which the levels of one factor are hierarchically nested within the levels of another factor. For example, let's imagine that we are interested in the effect of a type of drug on the expression of a specific gene. For this we design a nested experiment with mice as experimental units (in the figure two mice per treatment), where we include a control. From each mouse we took three cells and in each one we evaluated the expression of the gene twice (technical repetitions).\n\n![](images/nested_design.jpg){fig-align=\"center\" width=\"500\"}\n\nAs shown in the figure, our design has a hierarchical appearance.\n\nIn this type of design we distinguish between two types of factors: *fixed* and *random*. A fixed factor is one that has discrete or finite values, while a random factor can take many values. In our example the drug factor would be considered a fixed factor and the mouse, cell and repeated measurements factors would be considered random factors. Note how the random factors are similar, such as mouse and cell, but not identical to each other and these are successively nested until the fixed factor drug.\n\nNow let's see how we can analyze the results of this type of experimental design with the help of R code. It is important to mention that I took as a basis the publication in *nature methods*: <a href=\"https://www.nature.com/articles/nmeth.3137\" target=\"_blank\">Nested designs</a> and replicated the example shown using, of course, R code. In addition, I added an extra drug and performed a multiple comparisons test to establish significant differences between the means of each treatment.\n\nIf you are interested about how I simulated the data, please take a look at the code in the data_simulation script found in the repository of this tutorial: (link).\n\n# Packages\n\nFor the visualization of the results I used `ggplot2` package and for the statistical analysis I used the `GAD`, `lme4`, `multicomp` and `agricolae` packages. To install them you can run the following line of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"ggplot2\", \"GAD\", \"lme4\", \"multcomp\", \"agricolae\"))\n```\n:::\n\n\nOnce installed, it is important not to forget to load these packages in your R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(GAD)\nlibrary(lme4)\nlibrary(multcomp)\nlibrary(agricolae)\n```\n:::\n\n\n# Data import\n\nThe data for this tutorial are in the repository <a href=\"https://github.com/juanpa-biotech/nested-designs/tree/master\" target=\"_blank\">nested-designs</a> and you can import with the `read_csv()` function from `readr` package. If you have not installed this package, first run the following line of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readr\")\n```\n:::\n\n\nThen we load readr in our session and import the data directly from the repository of this post:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nmice_data <- read_csv(\"https://raw.githubusercontent.com/juanpa-biotech/nested-designs/master/mice_data.csv\")\n```\n:::\n\n\nWe can use the `head()` function to display the first rows of our data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mice_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 5\n  tech_rep     C     B     A  expr\n     <dbl> <dbl> <dbl> <dbl> <dbl>\n1        1     1     1     1  8.55\n2        2     1     1     1  9.79\n3        3     1     1     1  9.76\n4        1     2     1     1  9.47\n5        2     2     1     1 10.1 \n6        3     2     1     1  9.37\n```\n:::\n:::\n\n\nThe *tech_rep* column corresponds to technical replicates, *A* indicates the drug factor levels, *B* the mouse factor levels and *C* the cell factor levels. For this example, five mice were used for the control and for each type of drug and five cells were taken from each.The *expr* column has the expression level data for each treatment, mouse, cell and technical replicate.\n\nIn R Studio, it is also possible to display the data in a separate window with the `View()` function. Try running `View(mice_data)` in your console and see what happens.\n\n# Visualization of experimental results\n\nAs a first step we add three new columns to the data. If you have not installed the `dplyr` package, first run `install.packages(dplyr)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmice_data2 <- mice_data %>% \n  mutate(\n    A       = as.factor(A),\n    group_a = rep(c(13, 38, 63), each = 75),            # Drug kind\n    group_b = rep(seq(3, 73, by = 5), each = 15),       # Mice  \n    group_c = rep(1:75, each = 3)                       # Cells \n  )\n```\n:::\n\n\nThe added columns will serve to indicate the position of some statistics (means) for each factor on the x-axis of our graph. I saved the result of this operation in a new object, so we keep the original data intact.\n\n`ggpplot2` allows us to build our visualizations by layers, so to build complex plots we simply make simple layers and \"stack\" them. First we generate a dot plot of the expression levels with respect to group *C* (cells) and add a horizontal line indicating the mean within each group of measurements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr_plot <- ggplot(mice_data2, aes(x = group_c, y = expr)) +\n  geom_point(aes(color = A), size = 1) +\n  stat_summary(\n    fun = mean, geom = \"crossbar\", width = 0.5, color = \"black\", linewidth = 0.3\n  )\nexpr_plot \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first layer plot-1.png){width=672}\n:::\n:::\n\n\nIn the previous graph each group of three points represents the technical repetitions made in each cell.\n\nNow let's add an extra layer with red horizontal lines representing the expression means of each mouse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr_plot <- expr_plot +\n  stat_summary(\n    aes(x = group_b, y = expr),\n    fun = mean, geom = \"crossbar\", width = 4.5, color = \"red\", linewidth = 0.3\n  )\nexpr_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/second layer plot-1.png){width=672}\n:::\n:::\n\n\nAs a third layer we add horizontal lines representing the expression means for each treatment, that is, the expression results of each mouse averaged at each drug type and the control:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr_plot <- expr_plot +\n   stat_summary(\n    aes(x = group_a, y = expr), \n    fun = mean, geom = \"crossbar\", width = 25, color = \"blue\", linewidth = 0.3\n  )\nexpr_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/third layer plot-1.png){width=672}\n:::\n:::\n\n\nFinally, let's customize the appearance of the chart a bit by modifying font and font sizes, and editing the text of each axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr_plot <- expr_plot +\n  scale_x_continuous(breaks = c(13, 38, 63), labels = c(\"\", \"\", \"\")) +\n  labs(color = \" \", y = \"Expression\", x = \" \") +\n  scale_color_discrete(labels = c(\"Control\", \"Drug 1\", \"Drug 2\")) +\n  theme_classic() +\n  theme(\n    axis.title.y = element_text(face = \"bold\", color = \"black\", size = rel(1.2)),\n    axis.text.y  = element_text(color = \"black\", size = rel(1.2))\n  )\nexpr_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot appearance-1.png){width=672}\n:::\n:::\n\n\nOne way to export our graph in some format is by using the `ggsave()` function. Try running the following line of code and see what happens:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"expr_plot.jpeg\", plot = expr_plot)\n```\n:::\n\n\n# Inferential statistical analysis\n\n## ANOVA Table\n\nAs can be seen in our graph, there seems to be a difference between the effect of drug 2 with the other two levels of this factor (drug 1 and control). We can define if there are significant differences by means of an ANOVA table and subsequently a multiple comparisons test.\n\nLet's obtain the ANOVA table with the `GAD` package, first we have to specify the fixed and random factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug <- as.fixed(mice_data$A)\nmice <- as.random(mice_data$B)\ncell <- as.random(mice_data$C)\n```\n:::\n\n\nTo fit the linear model we must take into account the relationship between our response and the previously specified factors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_aov <- aov(\n  expr ~ drug + mice:drug + cell:mice:drug,\n  data = mice_data\n  )\n```\n:::\n\n\nThe term `mice:drug` denotes the variability of mice within each treatment, and the term `cell:mice:drug` denotes the variability of cells within each mouse and in turn within each treatment.\n\nTo display the ANOVA table we use the `gad()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngad(data_aov)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: expr\n                Df Sum Sq Mean Sq F value    Pr(>F)    \ndrug             2 743.44  371.72  12.796  0.001058 ** \ndrug:mice       12 348.59   29.05   5.163 7.413e-06 ***\ndrug:mice:cell  60 337.59    5.63  11.153 < 2.2e-16 ***\nResidual       150  75.67    0.50                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe `gad()` function distinguishes between fixed and random effects, as well as the nested structure between these factors, so it makes corrections to calculate the *F-ratios*. The reason for this is that, depending on whether we are considering fixed or random effects, the expected values for the *error mean squares* (EM) change as follows:\n\n![](images/mean_squares.png){fig-align=\"center\" width=\"350\"}\n\nIn the above equations it is possible to observe the nested structure in the mean squares. Also note how for the case of treatments ($MS_A$) the expected values add up to the contribution to the variation of mice and cells. Therefore, it is necessary to divide $MS_A$ by $MS_B$ to obtain the F-ratio and infer differences between treatments.\n\nImportantly, in the case of technical replicates the variability of this random factor is properly estimated by the mean square of the `Residual` term in our ANOVA table.\n\n## Estimation of the variability of each factor\n\nWhen dealing with random factors, we are mainly interested in estimating their contribution to the variability of the response, as opposed to fixed factors where we are interested in estimating their effect on the population mean.\n\nWith the `lme4` package we can estimate the contribution to variability of mice, cells and properly the error term (technical replicates). First we need to convert the data type in columns *A*, *B* and *C* into factors and then use the `lmer()` function as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmice_data3 <- mice_data %>% \n  mutate(A = as.factor(A), B = as.factor(B), C = as.factor(C))\n\ndata_lme <- lmer(expr ~ 1 + A + (1|B:A) + (1|C:B:A), data = mice_data3)\n```\n:::\n\n\nNote that fitting the linear model with the `lmer()` function requires a somewhat different syntax than that used with `aov()` and `gad()`. To show the contribution to variability of each factor we use the `summary()` function with the `data_lme` object as argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data_lme)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: expr ~ 1 + A + (1 | B:A) + (1 | C:B:A)\n   Data: mice_data3\n\nREML criterion at convergence: 684.4\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.76545 -0.53144 -0.02996  0.59495  2.20017 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n C:B:A    (Intercept) 1.7073   1.3066  \n B:A      (Intercept) 1.5615   1.2496  \n Residual             0.5045   0.7103  \nNumber of obs: 225, groups:  C:B:A, 75; B:A, 15\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  10.0519     0.6224  16.151\nA2            1.4654     0.8801   1.665\nA3           -2.9085     0.8801  -3.305\n\nCorrelation of Fixed Effects:\n   (Intr) A2    \nA2 -0.707       \nA3 -0.707  0.500\n```\n:::\n:::\n\n\nUnder `Random effects` the term `Residual` refers to technical replicates, the term `B:A` to mice and the term `C:B:A` to cells.\n\n## Multiple comparisons\n\nThe `glth()` function of the `multcomp` package can be used to perform the multiple comparison test:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmult_drug <- glht(data_lme, linfct = mcp(A = \"Tukey\"))\nsummary(mult_drug)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\t Simultaneous Tests for General Linear Hypotheses\n\nMultiple Comparisons of Means: Tukey Contrasts\n\n\nFit: lmer(formula = expr ~ 1 + A + (1 | B:A) + (1 | C:B:A), data = mice_data3)\n\nLinear Hypotheses:\n           Estimate Std. Error z value Pr(>|z|)    \n2 - 1 == 0   1.4654     0.8801   1.665   0.2188    \n3 - 1 == 0  -2.9085     0.8801  -3.305   0.0027 ** \n3 - 2 == 0  -4.3739     0.8801  -4.970   <1e-04 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Adjusted p values reported -- single-step method)\n```\n:::\n:::\n\n\nAlternatively or additionally it is also possible to use the `HSD.test()` function of the `agricolae` package. For this I specified the mean squared error for mice (29.05) as well as the degrees of freedom for this factor (12):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntukey_hsd <- with(mice_data, HSD.test(expr, A, DFerror = 12, MSerror = 29.05))\ntukey_hsd$groups\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       expr groups\n2 11.517297      a\n1 10.051919      a\n3  7.143408      b\n```\n:::\n:::\n\n\nAccording to the results of the above analyses, we can conclude that drug 2 significantly reduced the gene expression levels compared to drug 1 and the control.\n\n# Key points\n\n* A nested design is a type of experimental design in which the levels of one factor are hierarchically nested within the levels of another factor.\n* In this type of design, a distinction is made between fixed factors (which have discrete or finite values) and random factors (which can take many values). In the example, the drug factor was considered as fixed, while the mouse, cell and repeated measurements factors were considered random.\n* It is possible to use the `ggplot2` package to visualize the results of this type of design.\n* The `GAD` package was used to perform the analysis of variance of the results of this design.\n* The `lme4` package was used to estimate the contribution to variability of the random factors mice, cells and technical replicates.\n* Two methods for performing multiple comparisons tests were described, using the `multicomp` and `agricolae` packages.\n\nThe code on this post is licensed under the [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/)\n\n[![](https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg)](http://creativecommons.org/licenses/by/4.0/)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}